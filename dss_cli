#!/usr/bin/env python
#
#    A Python command line client to an Open-E DSS Storage Server
#    Copyright (C) 2013  Andreas Thienemann <andreas@bawue.net>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the version 2 of the GNU General Public License
#    as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import ConfigParser
import optparse
import pprint
import operator
import sys
import DSS_Scraper
import DSS_API

class dss_cli:
    def __init__(self):
        self.servers = dict()
        self.groups = dict()
        self.debug = False
        self.read_config()

    def read_config(self, file = "config.ini"):
        r"""Read the config file and build the servers dictionary-tree
            containing all the data from the configuration file"""
        config = ConfigParser.RawConfigParser()
        config.readfp(open(file))
        for server in config.sections():
            if server == "failovergroups":
                continue
            self.servers[server] = dict()
            for option in config.options(server):
                self.servers[server][option] = config.get(server, option)
        for group in config.options("failovergroups"):
            self.groups[group] = config.get("failovergroups", group).split()

    def register_commands(self, server):
        server = self.servers[server]
        dss_ssh = DSS_API.DSS_API(server["address"], server["sshkey"])
        dss_ssh.get_cmds()
        dss_web = DSS_Scraper.DSS_Scraper("https://%s" % (server["address"]), server["password"])
        dss_web.get_cmds()
        self.commands = {}
        self.command_source = {}
        for key in dss_ssh.commands:
            self.commands[key] = dss_ssh.commands[key]
            self.command_source[key] = "api"
        for key in dss_web.commands:
            self.command_source[key] = "web"
            self.commands[key] = dss_web.commands[key]

    def exec_cmd(self, server, args):
        cmd = args[0]
        if args[-1] in ["-h", "--help"]:
            if self.command_source[cmd] == "api":
                server = self.servers[server]
                dss_ssh = DSS_API.DSS_API(server["address"], server["sshkey"])
                dss_ssh.get_cmds()
                print dss_ssh.get_cmd_help(cmd)
                sys.exit(0)
            elif self.command_source[cmd] == "web":
                server = self.servers[server]
                dss_web = DSS_Scraper.DSS_Scraper("https://%s" % (server["address"]), server["password"], debug=self.debug)
                print dss_web.get_cmd_help(cmd)
                sys.exit(0)
        else:
            if self.command_source[cmd] == "api":
                server = self.servers[server]
                dss_ssh = DSS_API.DSS_API(server["address"], server["sshkey"])
                print dss_ssh.api_exec(" ".join(args))
                sys.exit(0)
            elif self.command_source[cmd] == "web":
                server = self.servers[server]
                dss_web = DSS_Scraper.DSS_Scraper("https://%s" % (server["address"]), server["password"], debug=self.debug)
                dss_web.login()
                try:
                  dss_web.web_exec(args)
                except TypeError:
                  print dss_web.get_cmd_help(cmd)
                dss_web.logout()
                sys.exit(0)            

def main():
    # Read cmdline
    usage = "usage: %prog [options] <host|group> <command>"
    description = "Command Line Interface to interact with an Open-E DSS Storage Server"
    epilog = "Use --list to get a list of all supported commands. Each command should support the --help parameter to get a list of accepted arguments."
    parser = optparse.OptionParser(usage = usage, description = description, epilog = epilog, add_help_option = True)
    parser.disable_interspersed_args()
    parser.add_option("-f", "--file", dest="config_file", help="Configuration file to use", metavar = "FILE", default = "config.ini")
    parser.add_option("-l", "--list", action="store_true", help="List all commands available", dest = "list", default = False)
    parser.add_option("-g", "--failovergroup", action="store_true", help="List all configured failover groups", dest="group")
    # parser.add_option("-v", "--verbose", action="store_const", const=1, dest="verbose")
    parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False)
    (options, args) = parser.parse_args()

    cli = dss_cli()

#    if options.group == True:

    if options.debug:
        cli.debug = True

    if options.group:
        strfmt = "%-15s %-15s %-15s"
        print "Configured failover groups:\n"
        print strfmt % ("Group name", "Primary Host", "Secondary Host")
        print "=" * 47
        for group in cli.groups:
            print strfmt % (group, cli.groups[group][0], cli.groups[group][1])
        sys.exit(0)
    elif options.list == True:
        if len(args) == 0:
            parser.error("Need to specify a host for the --list command")
        elif len(args) > 0:
            if args[0] not in cli.servers:
                parser.error("Unknown host")
        cli.register_commands(args[0])
        for cmd in sorted(cli.commands):
            print "%-25s - %s" % (cmd, cli.commands[cmd])
        sys.exit(0)
    elif len(args) == 0:
        parser.error("No command specified.")
    elif len(args) < 2:
        parser.error("Need to specify both a host and a command")
    elif len(args) >= 2:
        if args[0] not in cli.servers:
            parser.error("Unknown host")
        cli.register_commands(args[0])
        if args[1] not in cli.commands:
            parser.error("Unknown command")

    # Execute the command
    cli.exec_cmd(args[0], args[1:])

if __name__ == "__main__":
    main()
